import iGridButton from "../interfaces/iGridButton";
import GenericGrid from "../components/genericgrid";
import { Guid } from "guid-typescript";
import iColumnDefinition from "../interfaces/iColumnDefinition";

export function GetGridButtons(tmpButtons: any): iGridButton[] {
  let btnAddNew = {
    name: "Add New",
    id: "btnAddNew",
    cssClass: "New-symbol",
    style: "",
    toolTip: "Add New",
    clickEvent: function (tmpGenericGrid: GenericGrid) {
      let tempRow: any = {};
      tempRow[tmpGenericGrid._primaryKeyName] = Guid.create().toString();
      tempRow["rowstate"] = "New";
      let tempData = [tempRow, ...tmpGenericGrid.state.data];
      tmpGenericGrid.setState({ data: tempData, addNewClicked: true });
    },
  };

  let btnRefresh = {
    name: "Refresh",
    id: "btnRefresh",
    cssClass: "Refresh-symbol",
    style: "",
    toolTip: "Refresh",
    clickEvent: function (tmpGenericGrid: GenericGrid) {
      try {
        tmpGenericGrid.props.refresh(tmpGenericGrid._context);
      } catch {}
    },
  };

  let btnExportToExcel = {
    name: "Export",
    id: "btnExportToExcel",
    cssClass: "ExportToExcel-symbol",
    style: "",
    toolTip: "Export to Excel",
    clickEvent: function (tmpGenericGrid: GenericGrid) {
      try {
        tmpGenericGrid.ExportToExcel();
      } catch {}
    },
  };

  let btnDelete = {
    name: "Delete",
    id: "btnDelete",
    cssClass: "Remove-symbol",
    style: "",
    toolTip: "Delete Selected Rows",
    clickEvent: function (tmpGenericGrid: GenericGrid) {
      let selectedRows = tmpGenericGrid.ref.table.getSelectedRows();
      let selectedIds = selectedRows.map(
        (selectedRow: any) =>
          selectedRow.getData()[tmpGenericGrid._primaryKeyName]
      );

      let filteredData = tmpGenericGrid.state.data.filter(
        (item) => !selectedIds.includes(item[tmpGenericGrid._primaryKeyName])
      );

      tmpGenericGrid.setState({ data: filteredData });
      tmpGenericGrid.ResetSaveMessage();
    },
  };

  let btnClone = {
    name: "Clone",
    id: "btnClone",
    cssClass: "Save-symbol",
    style: "",
    toolTip: "Clone Selected Row",
    clickEvent: function (tmpGenericGrid: GenericGrid) {
      let selectedRows = tmpGenericGrid.ref.table.getSelectedRows();
      const currentRowIndex = selectedRows[0].getPosition(true);
      let tempRow = selectedRows[0].getData();

      const cloneRow = {
        ...tempRow,
      };
      cloneRow[tmpGenericGrid._primaryKeyName] = Guid.create().toString();

      cloneRow[tmpGenericGrid._primaryFieldName] =
        tempRow[tmpGenericGrid._primaryFieldName] + " clone";

      cloneRow["rowstate"] = "New";
      cloneRow["is_selected"] = false;

      tmpGenericGrid._gridConfig.Columns.forEach(
        (tmpCol: iColumnDefinition) => {
          if (tmpCol?.autoGenerated) {
            cloneRow[tmpCol.name] = "";
          }
        }
      );

      let tempData = [...tmpGenericGrid.state.data];
      tempData.splice(selectedRows[0].getPosition(true) + 1, 0, cloneRow);
      tmpGenericGrid.setState({
        data: tempData,
        clonedRowNumber: currentRowIndex,
        cloneClicked: true,
      });
    },
  };

  let btnSave = {
    name: "Save",
    id: "btnSave",
    cssClass: "Copy-symbol",
    style: "",
    toolTip: "Clone Selected Row",
    clickEvent: function (tmpGenericGrid: GenericGrid) {
      tmpGenericGrid.OnSaveClick();
    },
  };

  let tmpBtnsReturn: iGridButton[] = [];

  let boolShowAddButton = true;
  let boolShowAddButtonFull = true;
  let boolShowDeleteButton = true;
  let boolShowCloneButton = true;
  let boolShowSaveButton = true;
  let boolExportButton = true;
  let boolRefreshButton = true;

  if (tmpButtons) {
    tmpBtnsReturn = [...tmpButtons.CustomButtons];
    boolShowAddButton = tmpButtons.ShowAddButton ?? false;
    boolShowDeleteButton = tmpButtons.ShowDeleteButton ?? false;
    boolShowCloneButton = tmpButtons.ShowCloneButton ?? false;
    boolShowSaveButton = tmpButtons.ShowSaveButton ?? false;
    boolShowAddButtonFull = tmpButtons.boolShowAddButtonFull ?? false;
    boolExportButton = tmpButtons.boolExportButton ?? false;
    boolRefreshButton = tmpButtons.boolRefreshButton ?? false;
  }

  if (boolShowAddButton) tmpBtnsReturn.push(btnAddNew);
  if (boolShowDeleteButton) tmpBtnsReturn.push(btnDelete);
  if (boolShowCloneButton) tmpBtnsReturn.push(btnClone);
  if (boolExportButton) tmpBtnsReturn.push(btnExportToExcel);
  if (boolShowSaveButton) tmpBtnsReturn.push(btnSave);
  if (boolRefreshButton) tmpBtnsReturn.push(btnRefresh);

  return tmpBtnsReturn;
}
